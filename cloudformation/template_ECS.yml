AWSTemplateFormatVersion: "2010-09-09"

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.0.0/20

  Cluster:
    Type: AWS::ECS::Cluster

  ExtractorTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: extractor
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: extractor
          Memory: 2048
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/extractor:latest
          PortMappings:
            - ContainerPort: 5000
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/extractor
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: extractor
          Environment:
            - Name: TIMEOUT_LIMIT
              Value: "120"

  ExtractorService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref ExtractorTaskDefinition
      DesiredCount: 1

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: v1
      Description: Version 1 'stage'
      DeploymentId: !Ref Deployment
      ApiId: !Ref ApiGateway
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ApiGatewayRoute
    Properties:
      ApiId: !Ref ApiGateway

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: extractor-api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action 

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExtractorService}/invocations
      IntegrationMethod: POST
      ConnectionType: VPC_LINK
      ConnectionId: !Ref VpcLink

  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $connect
      Target: !Join ["/", ["integrations", !Ref ApiGatewayIntegration]]

  ApiGatewayIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationId: !Ref ApiGatewayIntegration
      IntegrationResponseKey: default

  VpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: extractor-vpclink
      SubnetIds:
        - !Ref Subnet
      SecurityGroupIds:
        - !Ref ExtractorSecurityGroup

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: extractor-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ExtractorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound access on port 443
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0


Outputs:
  ApiGatewayEndpoint:
    Description: API Gateway Endpoint
    Value: !Sub wss://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/extractor